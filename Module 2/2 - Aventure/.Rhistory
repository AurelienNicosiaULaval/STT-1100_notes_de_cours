install.packages("weathercan",
repos = c("https://ropensci.r-universe.dev",
"https://cloud.r-project.org"))
library(weathercan)
stations()
stations() %>% filter(prov == "QC")
## on regarde les stations contenu ----
library(tidyverse)
stations() %>% filter(prov == "QC")
%>% filter(interval == "day") # on prend par jours
stations() %>% filter(prov == "QC") %>%## on prend QC
filter(interval == "day") # on prend par jours
View(stations() %>% filter(prov == "QC") %>%
filter(interval == "day") )
## on va chercher des données de météo
df <- weather_dl(station_ids = 5251, start = "1970-01-01", end = "2017-01-01")
View(df)
## on va chercher des données de météo
df <- weather_dl(station_ids = 5251, interval == "day", start = "1970-01-01", end = "2017-01-01")
## on va chercher des données de météo
df <- weather_dl(station_ids = 5251, interval = "day", start = "1970-01-01", end = "2017-01-01")
View(df)
df2 = df %>% select(date, year, month, day, max_temp, mean_temp, min_temp,total_precip, total_rain, total_snow)
View(df2)
df2 = df %>% select(date, year, month, day,
max_temp, mean_temp, min_temp,
total_precip, total_rain, total_snow,
snow_grnd)
df2 = df %>% select( year, month, day,
max_temp, mean_temp, min_temp,
total_precip, total_rain, total_snow,
snow_grnd)
setwd("~/Nouveau cours Ulaval/STT-1100 Introduction à la science des données/Developpement materiel de cours/Module 1 - Plongée en science des données/1 - Aventure")
write.csv(df2, file = "Donnees meteo quebec 1970_2017.csv")
install.packages("~/Nouveau cours Ulaval/Package R Ulaval/UlavalDataScience_0.1.0.tar.gz", repos = NULL, type = "source")
librairy(UlavalDataScience)
library(UlavalDataScience)
MeteoQuebec
setwd("~/Nouveau cours Ulaval/STT-1100 Introduction à la science des données/Developpement materiel de cours/Module 1 - Plongée en science des données/1 - Aventure")
library(readxl)  # Chargement du package pour lire Excel
# Importation des données
penguins_mission <- read_excel("manchots_donnees.xlsx")
glimpse(penguins_mission)
library(readxl)  # Chargement du package pour lire Excel
# Importation des données
penguins_mission <- read_excel("manchots_donnees.xlsx")
glimpse(penguins_mission)
library(tidyverse)
glimpse(penguins_mission)
penguins_mission <- penguins_mission %>%
mutate(ratio = bill_length_mm/bill_depth_mm)
hist(penguins_mission$ratio)
mean(penguins_mission$ratio)
View(penguins_mission)
top_n
consulter_taches <- function(section) {
taches <- list(
"histogramme" = "Je veux voir la répartition des longueurs de bec des manchots à l'aide d'un histogramme.",
"statistiques_descriptives" = "Calculez la moyenne et la médiane des longueurs de nageoires pour chaque espèce."
)
return(taches[[section]])
}
morse_encode <- function(message) {
morse_dict <- c(
'A'='.−', 'B'='−...', 'C'='−.-.', 'D'='−..', 'E'='.', 'F'='..−.', 'G'='−−.', 'H'='....', 'I'='..', 'J'='.−−−',
'K'='−.-', 'L'='.-..', 'M'='−−', 'N'='−.', 'O'='−−−', 'P'='.—.', 'Q'='−−.-', 'R'='.-.', 'S'='...', 'T'='−',
'U'='..−', 'V'='...−', 'W'='.—', 'X'='−..−', 'Y'='−.−−', 'Z'='−−..', ' '='/')
message <- toupper(strsplit(message, '')[[1]])
paste(sapply(message, function(x) morse_dict[x]), collapse=' ')
}
consulter_taches <- function(section) {
taches <- list(
"histogramme" = "Je veux voir la répartition des longueurs de bec des manchots à l'aide d'un histogramme.",
"statistiques_descriptives" = "Calculez la moyenne et la médiane des longueurs de nageoires pour chaque espèce."
)
return(taches[[section]])
}
repondre_chercheuse <- function(question) {
reponses <- list(
"distribution bec" = "Les longueurs de bec semblent suivre une distribution normale avec quelques valeurs extrêmes.",
"longueur médiane nageoire" = "La combinaison île/espèce avec la longueur médiane de nageoire la plus faible est Adelie sur l'île Torgersen.",
"bill_ratio" = "Le rapport moyen entre la longueur et la profondeur du bec est d'environ 3.2, ce qui confirme les observations de terrain.",
"valeurs aberrantes" = "Oui, certaines valeurs aberrantes ont été détectées, notamment un manchot avec une nageoire de 400mm."
)
return(reponses[[question]])
}
repondre_chercheuse("distribution bec")
ggplot(penguins_mission, aes(x = bill_length_mm)) +
geom_histogram(binwidth = 2, fill = "steelblue", color = "black") +
labs(title = "Distribution de la longueur du bec des manchots",
x = "Longueur du bec (mm)",
y = "Effectif")
ggplot(data, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(penguins_mission, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
```{r}
ggplot(penguins_mission, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(penguins_mission, aes(x = bill_length_mm)) +
geom_histogram(binwidth = 2, fill = "steelblue", color = "black") +
labs(title = "Distribution de la longueur du bec des manchots",
x = "Longueur du bec (mm)",
y = "Effectif")
ggplot(penguins_mission, aes(x = bill_length_mm)) +
geom_histogram(binwidth = 2, fill = "steelblue", color = "black") +
labs(title = "Distribution de la longueur du bec des manchots",
x = "Longueur du bec (mm)",
y = "Effectif")
library(ggplot2)
ggplot(penguins_mission, aes(x = bill_length_mm)) +
geom_histogram(binwidth = 2, fill = "steelblue", color = "black") +
labs(title = "Distribution de la longueur du bec des manchots",
x = "Longueur du bec (mm)",
y = "Effectif")
ggplot(penguins_mission, aes(x = bill_length_mm)) +
geom_histogram()
ggplot(penguins_mission, aes(x = bill_length_mm)) +
geom_histogram()
library(ggplot2)
ggplot(penguins_mission, aes(x = bill_length_mm)) +
geom_histogram(binwidth = 2, fill = "steelblue", color = "black") +
labs(title = "Distribution de la longueur du bec des manchots",
x = "Longueur du bec (mm)",
y = "Effectif")
ggplot(penguins_mission, aes(x = bill_depth_mm)) +
geom_histogram(binwidth = 2, fill = "steelblue", color = "black") +
labs(title = "Distribution de la longueur du bec des manchots",
x = "Longueur du bec (mm)",
y = "Effectif")
ggplot(penguins_mission, aes(x = bill_depth_mm)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(title = "Distribution de la longueur du bec des manchots",
x = "Longueur du bec (mm)",
y = "Effectif")
ggplot(penguins_mission, aes(x = bill_depth_mm)) +
geom_histogram(binwidth = 0.8, fill = "steelblue", color = "black") +
labs(title = "Distribution de la longueur du bec des manchots",
x = "Longueur du bec (mm)",
y = "Effectif")
ggplot(penguins_mission, aes(x = bill_depth_mm)) +
geom_histogram(binwidth = 0.5, fill = "steelblue", color = "black") +
labs(title = "Distribution de la longueur du bec des manchots",
x = "Longueur du bec (mm)",
y = "Effectif")
ggplot(penguins_mission, aes(x = flipper_lenght_mm)) +
geom_histogram(binwidth = 0.5, fill = "steelblue", color = "black") +
labs(title = "Distribution de la longueur du bec des manchots",
x = "Longueur du bec (mm)",
y = "Effectif")
ggplot(penguins_mission, aes(x = flipper_length_mm)) +
geom_histogram(binwidth = 0.5, fill = "steelblue", color = "black") +
labs(title = "Distribution de la longueur du bec des manchots",
x = "Longueur du bec (mm)",
y = "Effectif")
#Voici les modifications que j'ai apportées au jeu de données des manchots pour cette aventure :
penguins[c(5, 10), c("flipper_length_mm", "body_mass_g", "bill_length_mm")]
library(palmerpenguins)
#Voici les modifications que j'ai apportées au jeu de données des manchots pour cette aventure :
penguins[c(5, 10), c("flipper_length_mm", "body_mass_g", "bill_length_mm")]
ggplot(penguins_mission, aes(x = species, y = flipper_length_mm, fill = species)) +
geom_boxplot() +
labs(title = "Distribution de la longueur des nageoires par espèce",
x = "Espèce",
y = "Longueur des nageoires (mm)")
consulter_taches("histogramme")
::: {class="experimentation"}
morse_encode <- function(message) {
morse_dict <- c(
'A'='.−', 'B'='−...', 'C'='−.-.', 'D'='−..', 'E'='.', 'F'='..−.', 'G'='−−.', 'H'='....', 'I'='..', 'J'='.−−−',
'K'='−.-', 'L'='.-..', 'M'='−−', 'N'='−.', 'O'='−−−', 'P'='.—.', 'Q'='−−.-', 'R'='.-.', 'S'='...', 'T'='−',
'U'='..−', 'V'='...−', 'W'='.—', 'X'='−..−', 'Y'='−.−−', 'Z'='−−..', ' '='/')
message <- toupper(strsplit(message, '')[[1]])
paste(sapply(message, function(x) morse_dict[x]), collapse=' ')
}
consulter_taches <- function(section) {
taches <- list(
"histogramme" = "Je veux voir la répartition des longueurs de nageoires des manchots à l'aide d'un histogramme.",
"statistiques_descriptives" = "Calculez la moyenne et la médiane des longueurs de nageoires pour chaque espèce."
)
return(taches[[section]])
}
repondre_chercheuse <- function(question) {
reponses <- list(
"distribution bec" = "Les longueurs de bec semblent suivre une distribution normale avec quelques valeurs extrêmes.",
"longueur médiane nageoire" = "La combinaison île/espèce avec la longueur médiane de nageoire la plus faible est Adelie sur l'île Torgersen.",
"bill_ratio" = "Le rapport moyen entre la longueur et la profondeur du bec est d'environ 3.2, ce qui confirme les observations de terrain.",
"valeurs aberrantes" = "Oui, certaines valeurs aberrantes ont été détectées, notamment un manchot avec une nageoire de 400mm."
)
return(reponses[[question]])
}
verifier_valeur_aberrante <- function(ligne) {
if (ligne == 5) {
return("Oui, cette valeur est bien une aberration !")
} else {
return("Ce n'est pas la bonne observation, essayez encore !")
}
}
#Voici les modifications que j'ai apportées au jeu de données des manchots pour cette aventure :
penguins[c(5, 10), c("flipper_length_mm", "body_mass_g", "bill_length_mm")]
library(UlavalSSD)
df = MeteoQuebec %>% filter(year == 1996) %>%
select(month, day, mean_temp, total_precip) %>%
mutate(id = 1:n())
summary(df)
library(tidyverse)
df = MeteoQuebec %>% filter(year == 1996) %>%
select(month, day, mean_temp, total_precip) %>%
mutate(id = 1:n())
summary(df)
ggplot(df, aes( x= id,y = mean_temp)) + geom_line(aes(linetype = "dashed"))
ggplot(df, aes( x= id,y = total_precip)) + geom_line()
ggplot(data = df, aes( x = mean_temp, y = total_precip, color = month)) +
geom_point()
df = MeteoQuebec %>% filter(year == 1996) %>%
select(month, day, mean_temp, total_precip) %>%
mutate(id = 1:n())
summary(df)
sum(df$mean_temp>0)
sum(df$mean_temp>0, na.rm=TRUE)
mean(df$mean_temp>0, na.rm=TRUE)
df %>% group_by(month) %>% summarise( m = mean(mean_temp, na.rm=TRUE))
df %>% group_by(month) %>% summarise( m = min(total_precip, na.rm=TRUE))
df %>% group_by(month) %>% summarise( m = max(total_precip, na.rm=TRUE))
df %>% group_by(month) %>% summarise( m = sd(total_precip, na.rm=TRUE))
df %>% group_by(month) %>% summarise( m = sd(total_precip, na.rm=TRUE)/mean(total_precip, na.rm=TRUE)
df %>% group_by(month) %>% summarise( m = sd(total_precip, na.rm=TRUE)/mean(total_precip, na.rm=TRUE))
df %>% group_by(month) %>%
summarise( m = sd(total_precip, na.rm=TRUE)/mean(total_precip, na.rm=TRUE))
df = MeteoQuebec %>% filter(year == 1996) %>%
select(month, day, mean_temp, total_precip) %>%
mutate(id = 1:n()-1)
ggplot(df, aes( x= id,y = mean_temp, color = total_precip)) +
geom_line(aes(linetype = "dashed"))
ggplot(df, aes( x= id,y = mean_temp)) +
geom_point(aes( color =total_precip ))+
geom_line(aes(linetype = "dashed"))
ggplot(data = df, aes(x = month, y = mean_temp))+
geom_boxplot()
ggplot(data = df, aes(x = month, y = mean_temp, fill = total_precip>0))+
geom_boxplot()+
ggplot(data = df, aes(x = month, y = mean_temp, fill = total_precip>0))+
geom_boxplot()
ggplot(data = df, aes(x = month, y = mean_temp, fill = total_precip>0))+
geom_boxplot()
df = df %>% mutate(precipitation = ifelse(total_precip>0, "oui", "non"))
ggplot(data = df, aes(x = month, y = mean_temp, fill = precipitation))+
geom_boxplot()
df_sans_na = df %>% na.omit() %>% mutate(precipitation = ifelse(total_precip>0, "oui", "non"))
ggplot(data = df, aes(x = month, y = mean_temp, fill = precipitation))+
geom_boxplot()
ggplot(data = df_sans_na, aes(x = month, y = mean_temp, fill = precipitation))+
geom_boxplot()
df %>% group_by(month, precipitation) %>% mutate(m = mean(mean_temp))
df %>% group_by(month, precipitation) %>% summarise(m = mean(mean_temp))
df_sans_na %>% group_by(month, precipitation) %>% summarise(m = mean(mean_temp))
learnr::quiz(
"Quel est le format de fichier importé ?",
question("Quel est le format utilisé dans cette aventure ?",
answer("CSV", correct = FALSE),
answer("Excel (.xlsx)", correct = TRUE),
answer("JSON", correct = FALSE),
allow_retry = TRUE
)
)
library(learnr)
learnr::quiz(
"Quel est le format de fichier importé ?",
question("Quel est le format utilisé dans cette aventure ?",
answer("CSV", correct = FALSE),
answer("Excel (.xlsx)", correct = TRUE),
answer("JSON", correct = FALSE),
allow_retry = TRUE
)
)
quiz(
"Quel est le format de fichier importé ?",
question("Quel est le format utilisé dans cette aventure ?",
answer("CSV", correct = FALSE),
answer("Excel (.xlsx)", correct = TRUE),
answer("JSON", correct = FALSE),
allow_retry = TRUE
)
)
data(wine)
data(winequality)
install.packages("titanic")
titanic::titanic_train
table1
library(tidyverse)
table 1
table1
library(readr)
df <- read_delim("~/Library/CloudStorage/OneDrive-UniversitéLaval/Documents/Nouveau cours Ulaval/STT-1100 Introduction à la science des données/Developpement materiel de cours/Module 4/Github/Dataset_pratique.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(df)
remotes::install_github("nrennie/messy")
table(dat$SEASON, dat$Quarter) # Winter en Q2 par possible
dat = df
table(dat$SEASON, dat$Quarter) # Winter en Q2 par possible
summary(dat$VEHICLE_YEAR) # 14 n'est pas possible
table(dat$VEHICLE_TYPE) # animal n'est pas une type d'auto
unique(nchar(dat$FSA_CODE))
dat$FSA_CODE[nchar(dat$FSA_CODE)>3] # code postal pas au meme format
boxplot(dat$COMMUTE_DISTANCE)
summary(dat$COMMUTE_DISTANCE) # le maximum semble atypique
library(readr)
df <- read_delim("~/Library/CloudStorage/OneDrive-UniversitéLaval/Documents/Nouveau cours Ulaval/STT-1100 Introduction à la science des données/Developpement materiel de cours/Module 4/Github/Dataset_pratique.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(df)
library(messy)
View(messy(df[1:10,]))
change_case(df[1:10,], cols = GENDER, messiness = 0.1, case_type = "word")
change_case(df[1:10,], cols = "GENDER", messiness = 0.1, case_type = "word")
View(change_case(df[1:10,], cols = "GENDER", messiness = 0.1, case_type = "word"))
View(change_case(df[1:10,], cols = "GENDER", messiness = 0.1, case_type = "letter"))
library(readr)
dat <- read_delim("~/Library/CloudStorage/OneDrive-UniversitéLaval/Documents/Nouveau cours Ulaval/STT-1100 Introduction à la science des données/Developpement materiel de cours/Module 4/Github/Dataset_pratique.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(dat)
install.packages("editData")
editData:::editData()
boxplot(dat$COMMUTE_DISTANCE)
summary(dat$COMMUTE_DISTANCE) #
editData:::editData()
boxplot(dat$COMMUTE_DISTANCE)
summary(dat$COMMUTE_DISTANCE) #
# on remplace commute 150 par 1500
dat$COMMUTE_DISTANCE[dat$COMMUTE_DISTANCE==150] <- 1500
summary(dat$COMMUTE_DISTANCE) #
ggplot(data = dat, aes(x=AGE)) +
geom_histogram() +
facet_grid(GENERATION.)+
theme_minimal()
ggplot(data = dat, aes(x=AGE)) +
geom_histogram() +
facet_grid(GENERATION~)+
ggplot(data = dat, aes(x=AGE)) +
geom_histogram() +
facet_grid(GENERATION~)+
ggplot(data = dat, aes(x=AGE)) +
geom_histogram() +
facet_grid(GENERATION~.)+
theme_minimal()
# On va prendre un gen Z et on va le remplacer par tradionalist
dat$GENERATION[dat$AGE==18] <- "Traditionalist"
ggplot(data = dat, aes(x=AGE)) +
geom_histogram() +
facet_grid(GENERATION~.)+
theme_minimal()
dat$MULTI_PRODUCT[sample(which(dat$MULTI_PRODUCT=="No"), size = 0.1*sum(dat$MULTI_PRODUCT=="No"))] <- "Maybe"
table(dat$MULTI_PRODUCT)
# on va ajouter des doublons de lignes, 5 lignes prix au hasard que l'on duplique, 4 deux fois et une 3 fois
set.seed(123)
doublons <- dat[sample(1:nrow(dat), 5), ]
doublons <- rbind(doublons, doublons[1:4, ])
doublons <- rbind(doublons, doublons[1, ])
dat <- rbind(dat, doublons)
table(unique(dat$ID_Variable))
table((dat$ID_Variable))
# comment verifier c'est lesquelles
dat[duplicated(dat), ] # on va voir les doublons
