---
title: "Aventure 1 - Plongée en science des données"
author: "Aurélien Nicosia"
format: html
editor: visual
---

# Introduction

Bienvenue dans cette première aventure en sciences des données ! Ce module est conçu pour vous offrir une introduction complète aux outils et concepts fondamentaux qui vous accompagneront tout au long de votre parcours en science des données. 

## Objectifs de ce module

Dans ce module, vous allez :

- **Découvrir les outils professionnels utilisés en science des données** : vous apprendrez à utiliser RStudio et Quarto, deux outils indispensables pour l’analyse de données, la visualisation et la production de rapports reproductibles.

- **Explorer des jeux de données réels** : grâce à des données fournies par une bibliothèque spécialisée, vous allez acquérir les bases de l'importation, de la manipulation et du nettoyage des données.

- **Apprendre les bonnes pratiques de codage** : nous mettrons l’accent sur des pratiques professionnelles pour écrire du code clair, reproductible et efficace.

- **Introduction au concept de données propres (Tidy)** : comprendre pourquoi organiser vos données est essentiel pour une analyse efficace et reproductible.

Ce module est structuré pour allier **théorie et pratique**. Vous serez guidé à travers des explications détaillées tout en ayant l'opportunité de mettre en pratique les concepts grâce à des exemples interactifs.

## À quoi vous attendre

### 1. Présentation des outils
Nous commencerons par une exploration des fonctionnalités de RStudio et de Quarto. Vous découvrirez comment ces outils interagissent pour vous permettre de produire des analyses et des rapports professionnels. Vous apprendrez également à configurer un environnement de travail optimal.

### 2. Manipulation de données
Vous serez initié aux concepts fondamentaux de manipulation de données. À travers des exemples concrets, nous explorerons comment sélectionner des variables ou observations, créer de nouvelles variables, et transformer vos données pour qu'elles soient prêtes à l'analyse.


### 3. Bonnes pratiques de codage
Enfin, nous discuterons des bonnes pratiques de codage en R, indispensables pour structurer efficacement vos projets de science des données.

## Comment réussir ce module
- **Lisez attentivement chaque section** avant de passer à l’expérimentation. Les explications théoriques fournissent les bases pour comprendre les exemples pratiques.

- **Expérimentez activement** en exécutant le code proposé et en explorant les résultats. N’hésitez pas à modifier les exemples pour tester vos idées.

- **Posez des questions** si vous rencontrez des difficultés ou si certains concepts restent flous.

Ce module est une porte d’entrée vers le vaste monde des sciences des données. Prenez le temps de bien explorer chaque étape, et amusez-vous à apprendre !

# Outils informatiques

Mettre du texte qui explique

## Découverte de RStudio

RStudio est un environnement de développement intégré (IDE) pour R. Il facilite la rédaction, l’exécution, et la gestion de projets en R, tout en intégrant de nombreuses fonctionnalités professionnelles. Voici un aperçu de ses principales fenêtres et fonctionnalités :

### Les fenêtres principales de RStudio
RStudio est composé de quatre panneaux principaux :

- **Console** : située généralement en bas à gauche, elle permet d'exécuter directement des commandes en R.

- **Script** : en haut à gauche, c'est l'endroit où vous rédigez et sauvegardez vos scripts (fichiers `.R` ou `.qmd`). Vous pouvez remarquer que la présente aventure est bien un `.qmd` dans la fenetre de script.

- **Environnement** : en haut à droite, il affiche les objets actuellement disponibles en mémoire (datasets, variables, fonctions).

- **Plots, fichiers et aide** : en bas à droite, ce panneau vous permet de visualiser vos graphiques, explorer les fichiers du projet, ou accéder à la documentation.

#### Expérimentation
- **Testez la console** : ouvrez la console et tapez la commande suivante :
  ```r
  print("Bonjour, RStudio !")
  ```
  Observez le résultat affiché directement dans la console.

- **Créez un script** : Cliquez sur `File > New File > R Script`, écrivez le code suivant et exécutez-le avec `Ctrl + Enter` :
  ```r
  message("Vous travaillez dans un script R !")
  ```
  Sauvegardez le fichier sous le nom `test_script.R`.

### Fonctionnalités importantes

- **Projets** : RStudio organise votre travail en projets, ce qui est idéal pour structurer vos fichiers et données. Nous travaillerons dans des projet dès la semaine prochaine.


- **Raccourcis clavier** : par exemple, `Ctrl + Enter` (Windows/Linux) ou `Cmd + Enter` (Mac) exécute une ligne de code.
  - **Exercice** : Tapez plusieurs lignes de code dans un script et testez les raccourcis pour les exécuter rapidement.

- **Terminal intégré** : pour exécuter des commandes système sans quitter RStudio.

- **Packages** : l'onglet "Packages" permet d'installer et de charger facilement des bibliothèques.
  - **Expérimentation** : Installez le package `dplyr` à l’aide de l’interface graphique ou via la commande suivante dans la console :
    ```r
    install.packages("dplyr")
    ```
    Une fois installé, chargez-le avec :
    ```r
    library(dplyr)
    ```


### Configurer votre environnement
Pour démarrer efficacement :

1. Personnalisez les préférences (`Tools > Global Options`) pour ajuster l'apparence et les paramètres selon vos besoins.

2. Familiarisez-vous avec les options d'exportation pour vos graphiques ou rapports.

#### Exercice
- **Exploration des options** : Accédez à `Tools > Global Options` et explorez les différentes configurations possibles. Essayez de changer le thème de l'interface (ex. : thème sombre) et observez la différence.


## Bases de la programmation en R

La programmation en R est essentielle pour manipuler, analyser et visualiser des données. Cette section vous introduit aux bases de la programmation et vous propose des exercices pour vous entraîner.

### Créer et manipuler des objets
En R, tout est un objet. Voici les bases pour créer des objets et les manipuler :

#### Expérimentation
- **Créer un objet** :
  ```r
  x <- 42  # Assigne la valeur 42 à l'objet x
  print(x)  # Affiche la valeur de x
  x # Affiche aussi la valeur de x
  ```

- **Manipuler un vecteur** :
  ```r
  vecteur <- c(1, 2, 3, 4, 5)  # Crée un vecteur
  somme <- sum(vecteur)  # Calcule la somme des éléments
  somme
  ```

#### Exercice
- Créez un vecteur contenant les chiffres de 1 à 10 et calculez sa moyenne en utilisant la fonction `mean()`.

### Écrire des conditions
Les conditions permettent de rendre vos scripts dynamiques.

#### Expérimentation
- **Condition simple** :
  ```r
  nombre <- 10
  if (nombre > 5) {
    print("Le nombre est supérieur à 5")
  } else {
    print("Le nombre est inférieur ou égal à 5")
  }
  ```


#### Exercice
- Écrivez une condition qui affiche si un nombre est pair ou impair.

### Fonctions de base
R dispose de nombreuses fonctions intégrées pour effectuer des calculs simples ou avancés.

#### Expérimentation
- **Calcul de base** :
  ```r
  carre <- function(x) {
    return(x^2)
  }
  print(carre(4))
  ```

#### Exercice
- Créez une fonction `cube` qui calcule le cube d’un nombre, puis testez-la avec les valeurs 2, 3 et 4.

### Bonnes pratiques en programmation
Voici quelques conseils pour écrire un code propre et facile à maintenir :

#### Règles d’or
1. **Nommer vos objets de manière descriptive** :
   ```r
   moyenne_notes <- mean(c(80, 85, 90))
   ```

2. **Organiser votre script avec des commentaires** :
   ```r
   # Calcul de la somme
   somme <- sum(vecteur)
   ```

3. **Utiliser un style cohérent** :
   Respectez une indentation uniforme pour améliorer la lisibilité.

#### Exercice
- Réorganisez ce code pour le rendre plus lisible :
  ```r
  x<-10
  if(x>5){print("Grand")
  }else{print("Petit")}
  ```


## Introduction à Quarto

Quarto est un outil puissant pour créer des documents reproductibles combinant texte, code, et résultats. Il prend en charge différents formats, tels que HTML, PDF et Word.

### Qu'est-ce que Quarto ?
Quarto vous permet de combiner du code R, Python ou Julia avec des explications textuelles, tout en générant des rapports professionnels. Bien sûr, dans ce cours nous l'utiliserons avec R. Ses principaux atouts incluent :

- La **reproductibilité** : le code et les résultats sont directement intégrés dans le même document.

- La **polyvalence** : possibilité de générer divers types de fichiers (rapports, présentations, sites web).

- La **simplicité d’utilisation**.

### Structure d’un document Quarto
Un fichier Quarto commence toujours par un en-tête YAML, suivi de contenu en Markdown et de blocs de code (chunks).

#### Exemple de fichier Quarto de base
```yaml
---
title: "Mon premier document Quarto"
format: html
editor: visual
---
```

#### Insérer un chunk R

Pour inserer un chunk (bloc de code) dans un document quarto, vous pouvez cliqué sur le symbole suivant :

![Bouton pour ajouter un chunck dans Rstudio](image/bouton_chunck.png)


```{r}
# Ceci est un chunk de code
2+2
```

Vous pouvez facilement executer un chuck soit en executant (`Ctrl + Enter`) ligne par ligne ou alors en cliquant sur la petite flèche verte dans le coin haut gauche du chunk. Vous remarquerez que vos résultats s'affiche sous la boite de code.

Une fois que votre rapport est final, vous pouvez generer le rapport en cliquant sur le bouton render: 
![Bouton pour ajouter generer le rapport](image/bouton_render.png)


### Expérimentation

- **Créer un document Quarto** :
  1. Cliquez sur `File > New File > Quarto Document`.
  2. Choisissez le format souhaité (HTML, PDF, Word) et générez un document de base.
  3. Insérez un chunk avec le raccourci `Ctrl + Alt + I` (ou le symbole) et ajoutez du code R (un truc simple).

- **Generer le document** : Utilisez `Ctrl + Shift + K` (ou le bouton render) pour générer le document final.

### Exercice
1. Créez un document Quarto au format HTML.
2. Ajoutez un chunk R pour afficher un résumé du dataset `mtcars` (il s'agit de `summary(mtcars)`).
3. Personnalisez l’en-tête YAML pour inclure votre nom et une date.




# Librairie et données

Nous avons vu plus haut que vous pouvez ameliorer votre experience de R en utilisant des librairies. Dans le cadre du cours, nous allons utiliser une librairie appellé `UlavalDataScience`. Il s'agit d'une librairie developpé pour le cours.

## `UlavalDataScience`

Premièrement, vous allez installer la librairie `UlavalDataScience` et la charger dans votre environnment de travail.

```{r}
#install.packages("~/Nouveau cours Ulaval/Package R Ulaval/UlavalDataScience_0.1.0.tar.gz", repos = NULL, type = "source")

library(UlavalDataScience)
```

Le fait de charger la librairie va nous permettre d'acceder à tous son contenu. Vous pouvez voir les fichiers d'aide de la librairie avec le code suivant (ou en cherchant dans l'onglet package à droite)

```{r}
help(package = "UlavalDataScience")
```

### Expérimentation

- Fouillez dans le contenu du package. Que remarquez vous?

## Données `MeteoQuebec`

Dans cette aventure, nous allons travailler avec le jeu de données appelé `MeteoQuebec` disponible dans la librairie `UlavalDataScience`. Il est important de noter que si la libraire n'est pas chargé (`library(UlavalDataScience)`) alors vous ne pourrez pas acceder a ce jeu de données.

### Experimentation

- `MeteoQuebec` est un nom d'objet dans l'environnement. Afficher la base de données en créant un chunck.
- Combien de lignes et de colonnes possèdent ce jeu de données?
- Explorer l'aide pour vous assurer de bien comprendre ce que représente chaque colonne.

# Données propres (`Tidy` en anglais)

## Qu'est-ce que des données propres ?

Dans le cadre de la science des données, **des données propres** désignent un ensemble de données qui est prêt à être utilisé pour des analyses. Cela signifie que les données sont organisées, cohérentes et exemptes d'erreurs ou d'incohérences. Travailler avec des données propres est essentiel pour garantir la qualité des résultats d'analyse et des modèles.

### Caractéristiques des données propres

Les données propres doivent respecter les critères suivants :

- **Aucune valeur manquante** : Toutes les données nécessaires pour l'analyse sont présentes.
- **Uniformité des formats** : Les formats des dates, des nombres et des chaînes de caractères sont cohérents.
- **Absence de doublons** : Les entrées en double ont été identifiées et supprimées si nécessaire.
- **Suppression des erreurs** : Les données incohérentes ou incorrectes ont été corrigées.
- **Colonnes bien définies** : Chaque colonne a une signification claire et unique.
- **Une ligne par observation** : Les données sont structurées de manière tabulaire, avec une ligne représentant une seule observation.

### Exemple de données non propres

Un tableau contenant les données suivantes :

| Nom        | Date Naissance | Score  |
|------------|----------------|--------|
| Alice      | 01/01/1990     | 85.5   |
| Bob        | 1990-02-15     | 90     |
| Charlie    |                | 87.5   |
| Alice      | 01/01/1990     | 85.5   |

Problèmes :
- Le format des dates n'est pas cohérent.
- Une ligne contient une valeur manquante (Date Naissance pour Charlie).
- Les données contiennent un doublon pour Alice.

### Exemple de données propres

Après nettoyage, les données deviennent :

| Nom        | Date Naissance | Score  |
|------------|----------------|--------|
| Alice      | 1990-01-01     | 85.5   |
| Bob        | 1990-02-15     | 90.0   |
| Charlie    | 1992-03-20     | 87.5   |

- Le format des dates est uniforme (AAAA-MM-JJ).
- Les doublons ont été supprimés.
- Les valeurs manquantes ont été complétées ou supprimées.

Dans les prochaines semaines, nous aurons un module complet sur le nettoyage des données, il s'agit ici de vous introduire à ces concepts clés de données propres afin que vous vous posiez la question à chaque fois que vous rencontrer des données.

#### Experimentation

- Dans le jeu de données `MeteoQuebec`, verifier s'il y a des données manquantes. VOus pouvez utiliser pour cela la fonction `summary`. Quand on applique la fonction `summary` sur un jeu de données, celle-ci nous donne des statistiques descriptives (pas interessant pour l'instant), mais elle donne surtout le nombre de données manquantes par colonne.

#### Exercice
- Les données `MeteoQuebec` sont-telles propres? Justifiez votre réponse.

# Manipulation de données

Dans cette section, nous allons apprendre à manipuler des tableaux de données simples en R. Vous découvrirez comment extraire une ligne, une colonne et créer une nouvelle colonne en utilisant les crochets `[]` et l'opérateur `$`.


## Exemple de tableau de données

Nous allons utiliser les données `MeteoQuebec`. La fonction `head` est très pratique, car comme son nom l'indique, elle permet d'afficher le haut (la tête) de la base de données. Cela permets d'avoir un accès rapide aux informations contenu dans les variables.

```{r}
# Affichage du haut du jeu de données
head(MeteoQuebec)
```

### Extraire une ligne avec des crochets `[]`

Pour extraire une ligne spécifique, utilisez le format `nom_data[numéro_de_ligne, ]`.

Exemple : Obtenons la 2e ligne :

```{r}
# Extraire la 2ᵉ ligne
ligne_2 <- MeteoQuebec[2, ]
print(ligne_2)
```

### Extraire une colonne avec des crochets `[]`

Pour extraire une colonne, vous pouvez utiliser `nom_data[, numéro_de_colonne]` ou `nom_data[["nom_de_colonne"]]`.

Exemple : Obtenons la colonne **total_precip** :

```{r,eval=FALSE}
# Méthode 1 : Par numéro de colonne
colonne_score <- MeteoQuebec[, 7]
print(colonne_score)

# Méthode 2 : Par nom de colonne
colonne_score2 <- MeteoQuebec[["total_precip"]]
print(colonne_score2)
```


### Extraire une colonne avec l'opérateur `$`

Une méthode plus simple pour extraire une colonne consiste à utiliser l'opérateur `$`.

Exemple : Obtenons la colonne **mean_temp** :

```{r,eval=FALSE}
# Extraire la colonne "mean_temp"
colonne_mean_temp <- MeteoQuebec$mean_temp 
print(colonne_mean_temp)
```

#### Experimentation
- Dans le console, taper le nom de la base de données `MeteoQuebec`, ajouter un `$` à la fin. Que se passe t-il?

### Ajouter une nouvelle colonne avec `$`

Pour créer une nouvelle colonne, utilisez l'opérateur `$` et assignez-y une valeur.

Exemple : Ajoutons une colonne **etendu_temp**, égale à **max_temp-min_temp** :

```{r}
# Ajouter une nouvelle colonne
MeteoQuebec$etendu_temp <- MeteoQuebec$max_temp -MeteoQuebec$min_temp
head(MeteoQuebec)
```

#### Exercice

- Creer une nouvelle colonne **mean_temp_F** qui correspond à la temperature moyenne par jour en degrés fahrenheit.


### Filtrer des lignes selon des conditions logiques

Vous pouvez utiliser des conditions logiques avec les crochets `[]` pour extraire des lignes spécifiques. 

Exemple : Obtenons les lignes où la temperature moyenne **mean_temp ** est supérieur à 25 :

```{r,eval=FALSE}
# Extraire les lignes avec un Score > 85
lignes_mean_temp_25 <- MeteoQuebec[MeteoQuebec$mean_temp > 25, ]
print(lignes_mean_temp_25)
```


#### Exercice 
- Obtenons les lignes où le total de precipitation **total_precip** est nul:
- Obtenir un sous ensemble de données pour le mois de juin seulement.


Exemple : Combiner plusieurs conditions avec `&` ou `|` :

#### Comprendre les opérateurs logiques

- **ET (`&`)** : Toutes les conditions doivent être vraies pour inclure une ligne.
- **OU (`|`)** : Au moins une des conditions doit être vraie pour inclure une ligne.

Voici un exemple, ou on va chercher le sous-ensemble des données de l'année 2000 lorsqu'il n'y avait aucune neige au sol

```{r,eval=FALSE}
MeteoQuebec[MeteoQuebec$year == 2000 & MeteoQuebec$snow_grnd == 0,]
```


### Résumé

| Action                        | Commande                              |
|-------------------------------|---------------------------------------|
| Extraire une ligne            | `data[numéro_de_ligne, ]`            |
| Extraire une colonne (crochets)| `data[, numéro_de_colonne]` ou `data[["nom_de_colonne"]]` |
| Extraire une colonne (`$`)      | `data$nom_de_colonne`                |
| Ajouter une nouvelle colonne  | `data$nouvelle_colonne <- ...`       |


# Défi

Félication, vous venez de terminer cette première aventure! Vous pouvez passer au défi:

Vous devez créer un rapport Quarto au format HTML. Votre rapport doit inclure :

- une en-tête parlante (titre, date et auteur) ;
- trois sections : introduction, analyse et conclusion.

Le rapport doit répondre à la question suivante : **"Suis-je né(e) la bonne année ?"**

Pour répondre à cette question, vous devrez réaliser une analyse simple de la base de données `MeteoQuebec` de la librairie `UlavalDataScience`. Voici les étapes à suivre :

1. **Décrire les conditions météorologiques** lors de votre jour de naissance.
2. **Analyser les conditions météorologiques** en comparant votre jour de naissance avec les données de 5 années consécutives avant et 5 années après votre année de naissance. Cela vous permettra de déterminer si les conditions météorologiques de votre jour de naissance étaient plus favorables.

**Remarque importante :**  
Si les données correspondant à votre jour de naissance contiennent des valeurs manquantes, par exemple pour la température moyenne, vous pouvez choisir une autre date symbolique, comme la date de fête d’un membre de votre famille, d’un ami ou de votre animal de compagnie.

Dans la section conclusion, vous devez répondre avec du texte à la question du défi.

**Livrables attendus :**

- Un rapport HTML ;

- Votre fichier source `.qmd`.